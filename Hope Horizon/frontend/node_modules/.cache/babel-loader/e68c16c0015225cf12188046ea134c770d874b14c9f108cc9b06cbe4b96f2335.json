{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\thava\\\\OneDrive\\\\Desktop\\\\Currently working\\\\Design Project\\\\Hope Horizon\\\\frontend\\\\src\\\\Pages\\\\StudentDetail.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst StudentDetail = ({\n  studentId\n}) => {\n  _s();\n  const [student, setStudent] = useState(null);\n  useEffect(() => {\n    const fetchStudent = async () => {\n      const response = await fetch(`/api/teacher/students/${studentId}`, {\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem('token')}`\n        }\n      });\n      const data = await response.json();\n      setStudent(data);\n    };\n    fetchStudent();\n  }, [studentId]);\n  const updateTaskStatus = async (domainId, taskId, status) => {\n    await fetch(`/api/teacher/students/${studentId}/domains/${domainId}/tasks/${taskId}`, {\n      method: 'PATCH',\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${localStorage.getItem('token')}`\n      },\n      body: JSON.stringify({\n        status\n      })\n    });\n    // Refresh data\n    const updatedStudent = {\n      ...student\n    };\n    const domain = updatedStudent.domains.find(d => d._id === domainId);\n    const task = domain.tasks.find(t => t._id === taskId);\n    task.status = status;\n    setStudent(updatedStudent);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"p-4\",\n    children: student === null || student === void 0 ? void 0 : student.domains.map(domain => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mb-6\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"text-xl font-bold\",\n        children: domain.domainName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grid grid-cols-4 gap-2\",\n        children: domain.tasks.map(task => /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => updateTaskStatus(domain._id, task._id, task.status === 'red' ? 'blue' : 'red'),\n          className: `p-2 rounded ${task.status === 'blue' ? 'bg-blue-500 text-white' : 'bg-red-500 text-white'}`,\n          children: task.taskName\n        }, task._id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 11\n      }, this)]\n    }, domain._id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n};\n_s(StudentDetail, \"pzKVz50thxP4x+ztGYlLWy+Ge6I=\");\n_c = StudentDetail;\nexport default StudentDetail;\nvar _c;\n$RefreshReg$(_c, \"StudentDetail\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","StudentDetail","studentId","_s","student","setStudent","fetchStudent","response","fetch","headers","Authorization","localStorage","getItem","data","json","updateTaskStatus","domainId","taskId","status","method","body","JSON","stringify","updatedStudent","domain","domains","find","d","_id","task","tasks","t","className","children","map","domainName","fileName","_jsxFileName","lineNumber","columnNumber","onClick","taskName","_c","$RefreshReg$"],"sources":["C:/Users/thava/OneDrive/Desktop/Currently working/Design Project/Hope Horizon/frontend/src/Pages/StudentDetail.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\n\r\nconst StudentDetail = ({ studentId }) => {\r\n  const [student, setStudent] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const fetchStudent = async () => {\r\n      const response = await fetch(`/api/teacher/students/${studentId}`, {\r\n        headers: { Authorization: `Bearer ${localStorage.getItem('token')}` },\r\n      });\r\n      const data = await response.json();\r\n      setStudent(data);\r\n    };\r\n    fetchStudent();\r\n  }, [studentId]);\r\n\r\n  const updateTaskStatus = async (domainId, taskId, status) => {\r\n    await fetch(`/api/teacher/students/${studentId}/domains/${domainId}/tasks/${taskId}`, {\r\n      method: 'PATCH',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        Authorization: `Bearer ${localStorage.getItem('token')}`,\r\n      },\r\n      body: JSON.stringify({ status }),\r\n    });\r\n    // Refresh data\r\n    const updatedStudent = { ...student };\r\n    const domain = updatedStudent.domains.find(d => d._id === domainId);\r\n    const task = domain.tasks.find(t => t._id === taskId);\r\n    task.status = status;\r\n    setStudent(updatedStudent);\r\n  };\r\n\r\n  return (\r\n    <div className=\"p-4\">\r\n      {student?.domains.map((domain) => (\r\n        <div key={domain._id} className=\"mb-6\">\r\n          <h3 className=\"text-xl font-bold\">{domain.domainName}</h3>\r\n          <div className=\"grid grid-cols-4 gap-2\">\r\n            {domain.tasks.map((task) => (\r\n              <button\r\n                key={task._id}\r\n                onClick={() => updateTaskStatus(domain._id, task._id, task.status === 'red' ? 'blue' : 'red')}\r\n                className={`p-2 rounded ${task.status === 'blue' ? 'bg-blue-500 text-white' : 'bg-red-500 text-white'}`}\r\n              >\r\n                {task.taskName}\r\n              </button>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default StudentDetail;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}